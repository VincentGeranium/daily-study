
# coding: utf-8

# ## 자료형의 값을 저장하는 공간, 변수

# ## 변수는 어떻게 만들까?

# In[1]:


#다음 예와 같은 a,b,c를 변수라고 한다.
a = 1
b = "python"
c = [1,2,3]


#  - 변수를 만들 때는 위의 예처럼 = (assigment)기호를 사용한다.
#  - C 언어나 Java처럼 변수의 자료형을 함꼐 쓸 필요는 없다.
#  - 파이썬은 변수에 저장된 값을 스스로 판단하여 자료형을 알아낸다.

# 변수명 = 변수에 저장할 값

# ## 변수란?

# - 파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다.
# - 객체란 우리가 지금껏 보아 왔던 자료형과 같은 것을 의미하는 말이다.

# In[3]:


a = [1,2,3]


# - 만약 위의 코드처럼 a = [1,2,3]이라고 하면 [1,2,3]이라는 값을 가지는 
#   리스트 자료형(객체)이 자동으로 메모리에 생성되고 변수 a는 [1,2,3] 이라는 리스트가
#   저장된 메모리의 주소를 가리키게 된다

# In[4]:


#a변수가 가리키는 메모리의 주소는 다음과 같이 확인할 수 있다.
a = [1,2,3]
id(a)


# - id 함수는 변수가 가리키고 있는 객체의 주소를 리턴해 주는 파이썬 내장함수이다.
# - 즉, a가 가리키고 있는  [1,2,3] 이라는 리스트의 주소는 4799101640임을 알 수 있다.

# ## 리스트를 변수에 넣고 복사하고자 할 때

# - 복사

# In[6]:


a = [1,2,3]
b = a


# - b변수에 a변수를 대입하면 어떻게 될까? b와 a는 같은 걸까?? 아니면 다른 걸까?? 결론부터
#   얘기하면 b는 a와 완전히 동일하다고 할 수 있다. 다만 [1,2,3]이라는 리스트를 참조하는
#   변수의 갯수가 a변수 1개에서 b변수가 추가되어 2개가 되었다는 차이가 있을 뿐이다.

# In[7]:


#ID명령을 이용하여 이러한 사실을 증명
id(a)


# In[8]:


id(b)


#  - id(a)의 값이 id(b)의 값과 동일함을 확인 할 수 있다. 즉,  a가 가리키는 대상과 b가
#    가리키는 대상이 동일하다는 것을 알 수 있다.
#    
#    동일한 객체를 가리키고 있는지 아닌지에 대해서 판단하는 파이썬 명령어인 is를 다음과 같이
#    실행해도 역시 True를 리턴하게 된다

# In[9]:


#a와 b가 가리키는 객체는 동일한가?
a is b


# In[10]:


a[1] = 4
a


# In[11]:


b


#  - a 리스트의 두번째 용소를 4라는 값으로 바꾸었더니 a만 바뀌는 것이 아니라 b도 똑같이
#    바뀌었다.
#    그 이유는 앞서 살펴본 것 처럼 a,b 모두 동일한 리스트를 가리키고 있기 때문이다.
#    
#    그렇다면 b변수를 생성할 때 a와 같은 값을 가지도록 복사해 널으면서 a가 가리키는 리스트와는
#    다른 리스트를 가리키게 하는 방법은 없을까?
#    다음 2가지 방법이 있다.

# ### 1. [:] 이용

# 첫 번째 방법으로는 아래와 같이 리스트 전체를 가리키는 [:]을 이용해서 복사하는 것이다.

# In[12]:


a = [1,2,3]


# In[13]:


b = a[:]


# In[14]:


a[1] = 4


# In[15]:


a


# In[81]:


id(a)


# In[16]:


b


# In[83]:


id(b)


# 위의 예에서 볼 수 있듯이 a 리스트 값을 바꾸더라도 b 리스트에는 영향을 끼치지 않는다.

# ### 2.copy 모듈 이용

#  - 두 번째는 copy 모듈을 이용하는 방법이다. 아래 예를 보면 from copy improt copy라는
#    처음 보는 형태가 나오는데, 이것은 뒤에 설명할 파이썬 모듈 부분에서 자세히 다룬다.
#    여기서는 단순히 copy라는 함수를 쓰기 위해서 사용되는 것 이라고만 알아두자.

# In[17]:


from copy import copy


# In[18]:


b = copy(a)


# - 위의 예에서 b = copy(a) 는 b = a[:] 과 동일하다.
#   
#   두 변수가 같은 값을 가지면서 다른 객체를 제대호 생성했는지 다음과 같이 확인 해 보자.
# 

# In[19]:


b is a


# 위의 예에서 b is a 가 False를 리턴하므로 b와 a가 가리키는 객체는 서로 다르다는 것을 알 수 있다.

# ### 변수를 만드는 여러 가지 방법

# In[20]:


a,b = ("python" , "life")


# 위의 예문처럼 튜플로 a,b에 값을 대입 할 수 있다. 이 방법은 다음 예문과 완전히 동일하다

# In[21]:


(a,b) = "python" , "life"


# 튜플 부분에서도 언급했지만 튜플은 괄호를 생략해도 된다.

# 아래처럼 리스트로 변수를 만들 수도 있다.

# In[23]:


[a,b] = ["python" , "life"]


# 또한 여러 개의 변수에 같은 값을 대입 할 수도 있다.

# In[24]:


a = b = "python"


# 파이썬에서는 위의 방법을 이용하여 두 변수의 값을 아주 간단히 바꿀 수 있다.

# In[25]:


a = 3


# In[26]:


b = 5


# In[27]:


a,b = b,a


# In[28]:


a


# In[29]:


b


# 처음에 a에 3, b에는 5라는 값이 대입되어 있었지만 a,b = b,a라는 문장을 수행한 후에는 그 값이
# 서로 바꾸었음을 확인 할 수 있다.

# ## 연습문제

# In[31]:


#문제 1 변수와 객체1
#다음 예제를 실행하고 그 결과를 설명
a = [1,2,3]


# In[32]:


b = [1,2,3]


# In[33]:


a is b


# 풀이 : a,b 모두 [1,2,3]이라는 동일한 값을 갖는 리스트이지만 서로 같은 객체는 아니다
# 따라서 동일한 객체인지를 판별하는 is 연산자의 결과는 False가 리턴 된다.

# 나의 문제 설명 : 
# 위의 a 와 b 는 다른 메모리 공간에 저장되어 있어서
# ID값이 다르므로 a is b 는 False를 출력한다

# In[34]:


#문제 2 변수와 객체2
#다음 예제를 실행하고 그 결과를 설명하시오.
a = [1,2,3]


# In[35]:


b = a


# In[36]:


a is b


# 풀이 : b = a와 같이 하면 b가 바라보는 객체와 a가 바라보는 객체가 같기 때문에 a와 b가 동일한 객체인지를 판별하는 is 연산의 결과는 True를 리턴한다.

# 나의 문제 설명 : 위의 a와 b는 같은 메모리 공간을 함께 사용한다
# a와 b는 같은 ID값을 갖으므로 a is b는 True를 출력한다.

#  - 문제3 객체의 변경
#  
#    파이썬은 다음처럼 동일한 값에 여러 개의 변수를 선언 할 수 있다. 
#    아래와 같이  a,b변수를 선언
#    한 후 a의 첫 번째 요소값을 변경하면 b의 값은 어떻게 될까? 그리고 이런 결과가 나오는 이유에
#    대해서 설명해 보자.
#    

# In[38]:


a = b = [1,2,3]


# In[39]:


a[1] = 4


# In[40]:


print(b)


# 풀이 : [1,4,3]이 출력된다. a와 b변수는 모두 동일한 [1,2,3]이라는 리스트 객체를 가리키고 있기 때문이다.

# 나의 문제 설명 : a와 b는 같은 ID값을 갖는다 그러므로 a의 첫 번쨰 요소값을 변경하면 b의
# 요소값도 함께 변경이 되어 b를 출력하면 a와 똑같이 변경이 된다

# In[42]:


#문제4 리스트 복사1
#다음 예제를 실행하고 그 결과를 설명하시오.
a = [1,2,3]


# In[43]:


b = a[:]


# In[44]:


a is b


# 풀이 : b = a[:]와 같이 사용하면 b는 a의 값을 copy한 새로운 값을 바라본다. 따라서 b와 a는 서로 다른 객체이므로 False가 출력된다.

# 나의 문제 설명 : a와 b는 다른 메모리 공간에 저장하여 요소값을 서로 다른 ID주소 값에 할당한다
# 그러므로 a is b 는 False를 출력한다

# In[46]:


#문제5 리스트 복사2
#b리스트는 a리스트를 copy하여 다음과 같이 생성하였다.
a = [1,2,3]


# In[47]:


b = a[:]


# In[48]:


#그리고 다음과 같이 a리스트의 두번째 요소값을 2에서 4로 바꾸었다.


# In[49]:


a[1] = 4


# In[50]:


a


# In[51]:


print(b)


# In[52]:


#b리스트가 이런 결과값을 나오게 하는 이유에 대해 설명


# 풀이 : [1,2,3]이 출력된다. b리스트는 a리스트를 copy해서 만든 새로운 객체이므로 a리스트의 값을 변경하더라도 b리스트의 값이 변경되지는 않는다.

# 나의 문제 설명 : a 와 b는 다른 메모리 공간에 요소값을 저장 즉, ID주소가 다름
# 그래서 a 의 요소값을 변경해도 b의 요소값은 바뀌지 않는다.

# In[53]:


#문제6 리스트의 더하기와 extend
#다음과 같은 리스트 a가 있다.


# In[54]:


a = [1,2,3]


# In[55]:


#리스트 a에  [4,5]를 + 기호를 이용하여 더한 결과는 다음과 같다.


# In[56]:


a = [1,2,3]


# In[57]:


a = a + [4,5]


# In[58]:


a


# In[59]:


#리스트 a에 [4,5]를 extend를 이용하여 더한 결과는 다음과 같다.


# In[60]:


a = [1,2,3]


# In[61]:


a.extend([4,5])


# In[62]:


a


# In[63]:


# + 기호를 이용하여 더한것과 extend한 것의 차이점이 있을까?
#있다면 그 차이점에 대해서 얘기 해 보자.


# 모르겟는데,,,

# In[64]:


#문제7 리스트 복사3


#  - a리스트는 리스트내에 [2,3]이라는 리스트를 하나 더 포함하고 있는 리스트이다.
#    이 a리스트를 copy하여 b 리스트를 다음과 같이 만들었다.

# In[65]:


a = [1,[2,3],4]


# In[66]:


b = a[:]


#  - 그리고 다음과 같이 a리스트에 포함된 [2,3]의 첫번째 값을 2에서 5로 바뀌어 주었다.
#    이렇게 a리스트에 포함된 리스트의 요소값을 변경하면 b리스트는 어떻게 될까?
#    그리고 그런 결과값이 나오는 이유에 대해서 설명하시오.

# In[67]:


a[1][0] = 5


# In[68]:


a


# In[69]:


print(b)


# --------------------------------------------------------------------------

# #### 문제 6 풀이

# 리스트의 더하기와 extend

# 리스트 a에 +기호를 이용하는 경우에 대해서 먼저 살펴보자.

# In[71]:


a = [1,2,3]


# In[72]:


id(a)


# id함수는 입력으로 받은 리스트 a의 주소값을 리턴해 준다. 현재 a라는 리스트는 4799301576
# 이라는 주소에 저장되어 있다.

# In[73]:


a = a + [4,5]


# In[74]:


a


# 리스트 a에 + 기호를 이용하여 [4,5]라는 리스트를 더해 보았다. 그리고 다시 다음과 같이 리스트a의 주소값을 확인해 보자

# In[75]:


id(a)


# 이전에 리스트 a가 저장되어 있던 주소와 다른 값이 리턴되는 것을 확인할 수 있다. 주소값이 다르기 때문에 +를 이용하면 리스트a의 값이 변하는 것이 아니라 두 리스트가 더해진 새로운 리스트가 리턴된다는 것을 확인할 수 있다.

# 이번에는 extend를 이용해 보자.

# In[76]:


a = [1,2,3]


# In[77]:


id(a)


# 리스트 a를 생성하고 그 주소값을 출력해 보았다.

# In[78]:


a.extend([4,5])


# In[79]:


a


# 그리고 리스트 a에 extend를 이용하여 [4,5]라는 리스트를 더 해 주었다.
# 그리고 다시 다음과 같이 리스트 a의 주소값을 확인해 보도록 하자.

# In[80]:


id(a)


# ##### + 기호를 이용하여 더한 경우와는 달리 주소값이 변하지 않고 그대로 유지되는 것을 확인 할 수 있다.

# --------------------------------------------------------------------------

# ##### 문제 7 풀이

# [1,[5,3],4]가 출력된다. a와 b는 서로 다른 객체이지만 a가 포함하고 있는 [2,3]리스트와 b가
# 포함하고 있는 [2,3]리스트는 서로 같은 곳을 바라보는 동일한 객체이다. 따라서 a가 포함하고 있는
# 리스트의 값을 변경하면 b가 포함하고 있는 리스트의 값도 함께 변경된다.

# In[84]:


a = [1,[2,3],4]


# In[85]:


b = a[:]


# In[86]:


a[1][0] = 5


# In[87]:


a


# In[88]:


print(b)


# b = a[:]와 같이 copy하는 것은 얕은 copy(shallow copy)라고도 한다.
# 그 이유는 위 예제에서 보는것과 같이 1 depth까지는 copy해 주지만 리스트가 포함하고 있는
# 2 depth 이상의 리스트는 copy해 주지 못하기 때문이다.
# 만약 객체가 포함하고 있는 객체마저 모두 copy하고 싶다면 다음처럼 깊은 copy(deep copy)를
# 사용해야 한다.

# In[89]:


from copy import deepcopy


# In[90]:


a = [1,[2,3],4]


# In[91]:


b = deepcopy(a)


# In[92]:


a[1][0] = 5


# In[93]:


a


# In[94]:


b


# In[95]:


id(a)


# In[96]:


id(b)


# In[97]:


a is b

